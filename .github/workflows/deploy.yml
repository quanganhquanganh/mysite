name: deploy

env:
  DOCKER_NON_INTERACTIVE: "true"

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  push:
    branches: [main]

jobs:
  build:
    if: ${{ github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build app
      run: make app
    - name: Upload app artifact
      uses: actions/upload-artifact@v1
      with:
        name: app
        path: dist/app.pyz

  deploy:
    if: ${{ github.event.action != 'closed' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Download app artifact
      uses: actions/download-artifact@v2
      with:
        name: app
        path: dist
    - name: Upload app to s3 bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID_DEPLOY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY_DEPLOY }}
        AWS_S3_BUCKET_NAME_DEPLOY: ${{ secrets.AWS_S3_BUCKET_NAME_DEPLOY }}
        DEPLOYMENT_STAGE_NAME: ${{ github.event.pull_request.number || 0 }}
      if: ${{ env.AWS_ACCESS_KEY_ID && env.AWS_SECRET_ACCESS_KEY && env.AWS_S3_BUCKET_NAME_DEPLOY && env.DEPLOYMENT_STAGE_NAME }}
      run: make deploy

  collectstatic:
    runs-on: ubuntu-latest
    if: ${{ github.event.action != 'closed' }}
    steps:
    - uses: actions/checkout@v2
    - name: Collect static files
      env:
        AWS_S3_ACCESS_KEY_ID_STATIC: ${{ secrets.AWS_S3_ACCESS_KEY_ID_STATIC }}
        AWS_S3_SECRET_ACCESS_KEY_STATIC: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY_STATIC }}
        AWS_REGION_STATIC: ${{ secrets.AWS_REGION_STATIC }}
        AWS_S3_BUCKET_NAME_STATIC: ${{ secrets.AWS_S3_BUCKET_NAME_STATIC }}
        ENABLE_S3_STORAGE: "true"
        AWS_S3_KEY_PREFIX_STATIC: ${{ github.event.pull_request.number || 0 }}
      if: ${{  env.AWS_S3_ACCESS_KEY_ID_STATIC && env.AWS_S3_SECRET_ACCESS_KEY_STATIC && env.AWS_REGION_STATIC && env.AWS_S3_BUCKET_NAME_STATIC }}
      run: make collectstatic

  deletestatic:
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
    - uses: actions/checkout@v2
    - name: Delete static files
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID_STATIC }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY_STATIC }}
        AWS_S3_BUCKET_NAME_STATIC: ${{ secrets.AWS_S3_BUCKET_NAME_STATIC }}
        DEPLOYMENT_STAGE_NAME: ${{ github.event.pull_request.number || 0 }}
      if: ${{ env.AWS_ACCESS_KEY_ID && env.AWS_SECRET_ACCESS_KEY && env.AWS_S3_BUCKET_NAME_STATIC && env.DEPLOYMENT_STAGE_NAME }}
      run: make deletestatic

  destroy:
    if: ${{ github.event.action == 'closed' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Delete app from s3 bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID_DEPLOY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY_DEPLOY }}
        AWS_S3_BUCKET_NAME_DEPLOY: ${{ secrets.AWS_S3_BUCKET_NAME_DEPLOY }}
        DEPLOYMENT_STAGE_NAME: ${{ github.event.pull_request.number || 0 }}
      if: ${{ env.AWS_ACCESS_KEY_ID && env.AWS_SECRET_ACCESS_KEY && env.AWS_S3_BUCKET_NAME_DEPLOY && env.DEPLOYMENT_STAGE_NAME }}
      run: echo $DEPLOYMENT_STAGE_NAME && make deploy-destroy

  terraform:
    runs-on: ubuntu-latest
    needs: deploy
    defaults:
      run:
        working-directory: terraform

    steps:
    - uses: actions/checkout@v2
      with:
        ref: "main"
    - uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_wrapper: false
        terraform_version: 1.5.3
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      if: ${{ env.TF_API_TOKEN }}

    - name: Terraform fmt
      id: fmt
      run: terraform fmt
      continue-on-error: true
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      if: ${{ env.TF_API_TOKEN }}

    - name: Terraform Init
      id: init
      run: terraform init
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      if: ${{ env.TF_API_TOKEN }}

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: ${{ env.TF_API_TOKEN }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      if: ${{ env.TF_API_TOKEN }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      if: ${{ env.TF_API_TOKEN }}
